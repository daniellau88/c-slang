// Generated from ./src/lang/Calc.g4 by ANTLR 4.9.0-SNAPSHOT

import { ATN } from 'antlr4ts/atn/ATN'
import { ATNDeserializer } from 'antlr4ts/atn/ATNDeserializer'
import { LexerATNSimulator } from 'antlr4ts/atn/LexerATNSimulator'
import { CharStream } from 'antlr4ts/CharStream'
import { NotNull } from 'antlr4ts/Decorators'
import { Override } from 'antlr4ts/Decorators'
import { Lexer } from 'antlr4ts/Lexer'
import * as Utils from 'antlr4ts/misc/Utils'
import { RuleContext } from 'antlr4ts/RuleContext'
import { Vocabulary } from 'antlr4ts/Vocabulary'
import { VocabularyImpl } from 'antlr4ts/VocabularyImpl'

export class CalcLexer extends Lexer {
  public static readonly CARET = 1
  public static readonly ASTERICK = 2
  public static readonly BACKSLASH = 3
  public static readonly PLUS = 4
  public static readonly MINUS = 5
  public static readonly PERCENT = 6
  public static readonly AMPERSAND = 7
  public static readonly TILDA = 8
  public static readonly EXCLAMATION_MARK = 9
  public static readonly VERTICAL_BAR = 10
  public static readonly QUESTION_MARK = 11
  public static readonly COLON = 12
  public static readonly SEMICOLON = 13
  public static readonly COMMA = 14
  public static readonly FULLSTOP = 15
  public static readonly RIGHT_ARROW = 16
  public static readonly OPEN_PARENTHESES = 17
  public static readonly CLOSE_PARENTHESES = 18
  public static readonly OPEN_SQUARE_BRACKET = 19
  public static readonly CLOSE_SQUARE_BRACKET = 20
  public static readonly OPEN_CURLY_BRACKET = 21
  public static readonly CLOSE_CURLY_BRACKET = 22
  public static readonly INCREMENT = 23
  public static readonly DECREMENT = 24
  public static readonly EQUAL = 25
  public static readonly TIMES_EQUAL = 26
  public static readonly DIVIDE_EQUAL = 27
  public static readonly MODULO_EQUAL = 28
  public static readonly PLUS_EQUAL = 29
  public static readonly MINUS_EQUAL = 30
  public static readonly SHIFT_LEFT_EQUAL = 31
  public static readonly SHIFT_RIGHT_EQUAL = 32
  public static readonly BITWISE_AND_EQUAL = 33
  public static readonly BITWISE_XOR_EQUAL = 34
  public static readonly BITWISE_OR_EQUAL = 35
  public static readonly BOOLEAN_AND = 36
  public static readonly BOOLEAN_OR = 37
  public static readonly EQUALITY_EQUAL = 38
  public static readonly EQUALITY_NOT_EQUAL = 39
  public static readonly RELATIONAL_GREATER_THAN = 40
  public static readonly RELATIONAL_LESS_THAN = 41
  public static readonly RELATIONAL_LESS_THAN_OR_EQUAL = 42
  public static readonly RELATIONAL_GREATER_THAN_OR_EQUAL = 43
  public static readonly SHIFT_LEFT = 44
  public static readonly SHIFT_RIGHT = 45
  public static readonly WHITESPACE = 46
  public static readonly SIZE_OF = 47
  public static readonly VOID_TYPE_SPECIFIER = 48
  public static readonly CHAR_TYPE_SPECIFIER = 49
  public static readonly SHORT_TYPE_SPECIFIER = 50
  public static readonly INT_TYPE_SPECIFIER = 51
  public static readonly LONG_TYPE_SPECIFIER = 52
  public static readonly FLOAT_TYPE_SPECIFIER = 53
  public static readonly DOUBLE_TYPE_SPECIFIER = 54
  public static readonly SIGNED_TYPE_SPECIFIER = 55
  public static readonly UNSIGNED_TYPE_SPECIFIER = 56
  public static readonly CONST_TYPE_QUALIFIER = 57
  public static readonly VOLATILE_TYPE_QUALIFIER = 58
  public static readonly INTEGER = 59
  public static readonly FLOAT = 60
  public static readonly CHAR = 61
  public static readonly IDENTIFIER = 62

  // tslint:disable:no-trailing-whitespace
  public static readonly channelNames: string[] = ['DEFAULT_TOKEN_CHANNEL', 'HIDDEN']

  // tslint:disable:no-trailing-whitespace
  public static readonly modeNames: string[] = ['DEFAULT_MODE']

  public static readonly ruleNames: string[] = [
    'CARET',
    'ASTERICK',
    'BACKSLASH',
    'PLUS',
    'MINUS',
    'PERCENT',
    'AMPERSAND',
    'TILDA',
    'EXCLAMATION_MARK',
    'VERTICAL_BAR',
    'QUESTION_MARK',
    'COLON',
    'SEMICOLON',
    'COMMA',
    'FULLSTOP',
    'RIGHT_ARROW',
    'OPEN_PARENTHESES',
    'CLOSE_PARENTHESES',
    'OPEN_SQUARE_BRACKET',
    'CLOSE_SQUARE_BRACKET',
    'OPEN_CURLY_BRACKET',
    'CLOSE_CURLY_BRACKET',
    'INCREMENT',
    'DECREMENT',
    'EQUAL',
    'TIMES_EQUAL',
    'DIVIDE_EQUAL',
    'MODULO_EQUAL',
    'PLUS_EQUAL',
    'MINUS_EQUAL',
    'SHIFT_LEFT_EQUAL',
    'SHIFT_RIGHT_EQUAL',
    'BITWISE_AND_EQUAL',
    'BITWISE_XOR_EQUAL',
    'BITWISE_OR_EQUAL',
    'BOOLEAN_AND',
    'BOOLEAN_OR',
    'EQUALITY_EQUAL',
    'EQUALITY_NOT_EQUAL',
    'RELATIONAL_GREATER_THAN',
    'RELATIONAL_LESS_THAN',
    'RELATIONAL_LESS_THAN_OR_EQUAL',
    'RELATIONAL_GREATER_THAN_OR_EQUAL',
    'SHIFT_LEFT',
    'SHIFT_RIGHT',
    'WHITESPACE',
    'SIZE_OF',
    'VOID_TYPE_SPECIFIER',
    'CHAR_TYPE_SPECIFIER',
    'SHORT_TYPE_SPECIFIER',
    'INT_TYPE_SPECIFIER',
    'LONG_TYPE_SPECIFIER',
    'FLOAT_TYPE_SPECIFIER',
    'DOUBLE_TYPE_SPECIFIER',
    'SIGNED_TYPE_SPECIFIER',
    'UNSIGNED_TYPE_SPECIFIER',
    'CONST_TYPE_QUALIFIER',
    'VOLATILE_TYPE_QUALIFIER',
    'NON_ZERO_DIGIT',
    'DIGIT',
    'ALPHABET',
    'ALPHABET_AND_UNDERSCORE',
    'INTEGER',
    'FLOAT',
    'CHAR',
    'IDENTIFIER',
  ]

  private static readonly _LITERAL_NAMES: Array<string | undefined> = [
    undefined,
    "'^'",
    "'*'",
    "'/'",
    "'+'",
    "'-'",
    "'%'",
    "'&'",
    "'~'",
    "'!'",
    "'|'",
    "'?'",
    "':'",
    "';'",
    "','",
    "'.'",
    "'->'",
    "'('",
    "')'",
    "'['",
    "']'",
    "'{'",
    "'}'",
    "'++'",
    "'--'",
    "'='",
    "'*='",
    "'/='",
    "'%='",
    "'+='",
    "'-='",
    "'<<='",
    "'>>='",
    "'&='",
    "'^='",
    "'|='",
    "'&&'",
    "'||'",
    "'=='",
    "'!='",
    "'>'",
    "'<'",
    "'<='",
    "'>='",
    "'<<'",
    "'>>'",
    undefined,
    "'sizeof'",
    "'void'",
    "'char'",
    "'short'",
    "'int'",
    "'long'",
    "'float'",
    "'double'",
    "'signed'",
    "'unsigned'",
    "'const'",
    "'volatile'",
  ]
  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
    undefined,
    'CARET',
    'ASTERICK',
    'BACKSLASH',
    'PLUS',
    'MINUS',
    'PERCENT',
    'AMPERSAND',
    'TILDA',
    'EXCLAMATION_MARK',
    'VERTICAL_BAR',
    'QUESTION_MARK',
    'COLON',
    'SEMICOLON',
    'COMMA',
    'FULLSTOP',
    'RIGHT_ARROW',
    'OPEN_PARENTHESES',
    'CLOSE_PARENTHESES',
    'OPEN_SQUARE_BRACKET',
    'CLOSE_SQUARE_BRACKET',
    'OPEN_CURLY_BRACKET',
    'CLOSE_CURLY_BRACKET',
    'INCREMENT',
    'DECREMENT',
    'EQUAL',
    'TIMES_EQUAL',
    'DIVIDE_EQUAL',
    'MODULO_EQUAL',
    'PLUS_EQUAL',
    'MINUS_EQUAL',
    'SHIFT_LEFT_EQUAL',
    'SHIFT_RIGHT_EQUAL',
    'BITWISE_AND_EQUAL',
    'BITWISE_XOR_EQUAL',
    'BITWISE_OR_EQUAL',
    'BOOLEAN_AND',
    'BOOLEAN_OR',
    'EQUALITY_EQUAL',
    'EQUALITY_NOT_EQUAL',
    'RELATIONAL_GREATER_THAN',
    'RELATIONAL_LESS_THAN',
    'RELATIONAL_LESS_THAN_OR_EQUAL',
    'RELATIONAL_GREATER_THAN_OR_EQUAL',
    'SHIFT_LEFT',
    'SHIFT_RIGHT',
    'WHITESPACE',
    'SIZE_OF',
    'VOID_TYPE_SPECIFIER',
    'CHAR_TYPE_SPECIFIER',
    'SHORT_TYPE_SPECIFIER',
    'INT_TYPE_SPECIFIER',
    'LONG_TYPE_SPECIFIER',
    'FLOAT_TYPE_SPECIFIER',
    'DOUBLE_TYPE_SPECIFIER',
    'SIGNED_TYPE_SPECIFIER',
    'UNSIGNED_TYPE_SPECIFIER',
    'CONST_TYPE_QUALIFIER',
    'VOLATILE_TYPE_QUALIFIER',
    'INTEGER',
    'FLOAT',
    'CHAR',
    'IDENTIFIER',
  ]
  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(
    CalcLexer._LITERAL_NAMES,
    CalcLexer._SYMBOLIC_NAMES,
    [],
  )

  // @Override
  // @NotNull
  public get vocabulary(): Vocabulary {
    return CalcLexer.VOCABULARY
  }
  // tslint:enable:no-trailing-whitespace

  constructor(input: CharStream) {
    super(input)
    this._interp = new LexerATNSimulator(CalcLexer._ATN, this)
  }

  // @Override
  public get grammarFileName(): string {
    return 'Calc.g4'
  }

  // @Override
  public get ruleNames(): string[] {
    return CalcLexer.ruleNames
  }

  // @Override
  public get serializedATN(): string {
    return CalcLexer._serializedATN
  }

  // @Override
  public get channelNames(): string[] {
    return CalcLexer.channelNames
  }

  // @Override
  public get modeNames(): string[] {
    return CalcLexer.modeNames
  }

  public static readonly _serializedATN: string =
    '\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02@\u0175\b\x01' +
    '\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06' +
    '\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r' +
    '\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t' +
    '\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t' +
    '\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t' +
    '\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04"\t' +
    "\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04'\t'\x04(\t(\x04)\t)\x04*\t*\x04" +
    '+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04' +
    '4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04' +
    '=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x03\x02\x03\x02\x03' +
    '\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03' +
    '\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\r' +
    '\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11\x03\x11' +
    '\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15' +
    '\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19' +
    '\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1C' +
    '\x03\x1D\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03\x1F' +
    '\x03 \x03 \x03 \x03 \x03!\x03!\x03!\x03!\x03"\x03"\x03"\x03#\x03#\x03' +
    "#\x03$\x03$\x03$\x03%\x03%\x03%\x03&\x03&\x03&\x03'\x03'\x03'\x03(" +
    '\x03(\x03(\x03)\x03)\x03*\x03*\x03+\x03+\x03+\x03,\x03,\x03,\x03-\x03' +
    '-\x03-\x03.\x03.\x03.\x03/\x06/\xFA\n/\r/\x0E/\xFB\x03/\x03/\x030\x03' +
    '0\x030\x030\x030\x030\x030\x031\x031\x031\x031\x031\x032\x032\x032\x03' +
    '2\x032\x033\x033\x033\x033\x033\x033\x034\x034\x034\x034\x035\x035\x03' +
    '5\x035\x035\x036\x036\x036\x036\x036\x036\x037\x037\x037\x037\x037\x03' +
    '7\x037\x038\x038\x038\x038\x038\x038\x038\x039\x039\x039\x039\x039\x03' +
    '9\x039\x039\x039\x03:\x03:\x03:\x03:\x03:\x03:\x03;\x03;\x03;\x03;\x03' +
    ';\x03;\x03;\x03;\x03;\x03<\x03<\x03=\x03=\x03>\x03>\x03?\x03?\x03@\x03' +
    '@\x07@\u0156\n@\f@\x0E@\u0159\v@\x03A\x03A\x07A\u015D\nA\fA\x0EA\u0160' +
    '\vA\x03A\x03A\x03A\x07A\u0165\nA\fA\x0EA\u0168\vA\x03B\x03B\x03B\x03B' +
    '\x03C\x03C\x03C\x07C\u0171\nC\fC\x0EC\u0174\vC\x02\x02\x02D\x03\x02\x03' +
    '\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02' +
    '\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F' +
    "\x02\x11!\x02\x12#\x02\x13%\x02\x14'\x02\x15)\x02\x16+\x02\x17-\x02\x18" +
    '/\x02\x191\x02\x1A3\x02\x1B5\x02\x1C7\x02\x1D9\x02\x1E;\x02\x1F=\x02 ' +
    '?\x02!A\x02"C\x02#E\x02$G\x02%I\x02&K\x02\'M\x02(O\x02)Q\x02*S\x02+U' +
    '\x02,W\x02-Y\x02.[\x02/]\x020_\x021a\x022c\x023e\x024g\x025i\x026k\x02' +
    '7m\x028o\x029q\x02:s\x02;u\x02<w\x02\x02y\x02\x02{\x02\x02}\x02\x02\x7F' +
    '\x02=\x81\x02>\x83\x02?\x85\x02@\x03\x02\x07\x05\x02\v\f\x0F\x0F""\x03' +
    '\x023;\x03\x022;\x04\x02C\\c|\x05\x02C\\aac|\x02\u0176\x02\x03\x03\x02' +
    '\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02' +
    '\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02' +
    '\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02' +
    '\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02' +
    '\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02' +
    "\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02'\x03\x02\x02\x02\x02" +
    ')\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02' +
    '\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02' +
    '\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03' +
    '\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02' +
    '\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02\x02I\x03\x02\x02\x02\x02' +
    'K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x02O\x03\x02\x02\x02\x02Q\x03\x02' +
    '\x02\x02\x02S\x03\x02\x02\x02\x02U\x03\x02\x02\x02\x02W\x03\x02\x02\x02' +
    '\x02Y\x03\x02\x02\x02\x02[\x03\x02\x02\x02\x02]\x03\x02\x02\x02\x02_\x03' +
    '\x02\x02\x02\x02a\x03\x02\x02\x02\x02c\x03\x02\x02\x02\x02e\x03\x02\x02' +
    '\x02\x02g\x03\x02\x02\x02\x02i\x03\x02\x02\x02\x02k\x03\x02\x02\x02\x02' +
    'm\x03\x02\x02\x02\x02o\x03\x02\x02\x02\x02q\x03\x02\x02\x02\x02s\x03\x02' +
    '\x02\x02\x02u\x03\x02\x02\x02\x02\x7F\x03\x02\x02\x02\x02\x81\x03\x02' +
    '\x02\x02\x02\x83\x03\x02\x02\x02\x02\x85\x03\x02\x02\x02\x03\x87\x03\x02' +
    '\x02\x02\x05\x89\x03\x02\x02\x02\x07\x8B\x03\x02\x02\x02\t\x8D\x03\x02' +
    '\x02\x02\v\x8F\x03\x02\x02\x02\r\x91\x03\x02\x02\x02\x0F\x93\x03\x02\x02' +
    '\x02\x11\x95\x03\x02\x02\x02\x13\x97\x03\x02\x02\x02\x15\x99\x03\x02\x02' +
    '\x02\x17\x9B\x03\x02\x02\x02\x19\x9D\x03\x02\x02\x02\x1B\x9F\x03\x02\x02' +
    '\x02\x1D\xA1\x03\x02\x02\x02\x1F\xA3\x03\x02\x02\x02!\xA5\x03\x02\x02' +
    "\x02#\xA8\x03\x02\x02\x02%\xAA\x03\x02\x02\x02'\xAC\x03\x02\x02\x02)" +
    '\xAE\x03\x02\x02\x02+\xB0\x03\x02\x02\x02-\xB2\x03\x02\x02\x02/\xB4\x03' +
    '\x02\x02\x021\xB7\x03\x02\x02\x023\xBA\x03\x02\x02\x025\xBC\x03\x02\x02' +
    '\x027\xBF\x03\x02\x02\x029\xC2\x03\x02\x02\x02;\xC5\x03\x02\x02\x02=\xC8' +
    '\x03\x02\x02\x02?\xCB\x03\x02\x02\x02A\xCF\x03\x02\x02\x02C\xD3\x03\x02' +
    '\x02\x02E\xD6\x03\x02\x02\x02G\xD9\x03\x02\x02\x02I\xDC\x03\x02\x02\x02' +
    'K\xDF\x03\x02\x02\x02M\xE2\x03\x02\x02\x02O\xE5\x03\x02\x02\x02Q\xE8\x03' +
    '\x02\x02\x02S\xEA\x03\x02\x02\x02U\xEC\x03\x02\x02\x02W\xEF\x03\x02\x02' +
    '\x02Y\xF2\x03\x02\x02\x02[\xF5\x03\x02\x02\x02]\xF9\x03\x02\x02\x02_\xFF' +
    '\x03\x02\x02\x02a\u0106\x03\x02\x02\x02c\u010B\x03\x02\x02\x02e\u0110' +
    '\x03\x02\x02\x02g\u0116\x03\x02\x02\x02i\u011A\x03\x02\x02\x02k\u011F' +
    '\x03\x02\x02\x02m\u0125\x03\x02\x02\x02o\u012C\x03\x02\x02\x02q\u0133' +
    '\x03\x02\x02\x02s\u013C\x03\x02\x02\x02u\u0142\x03\x02\x02\x02w\u014B' +
    '\x03\x02\x02\x02y\u014D\x03\x02\x02\x02{\u014F\x03\x02\x02\x02}\u0151' +
    '\x03\x02\x02\x02\x7F\u0153\x03\x02\x02\x02\x81\u015A\x03\x02\x02\x02\x83' +
    '\u0169\x03\x02\x02\x02\x85\u016D\x03\x02\x02\x02\x87\x88\x07`\x02\x02' +
    '\x88\x04\x03\x02\x02\x02\x89\x8A\x07,\x02\x02\x8A\x06\x03\x02\x02\x02' +
    '\x8B\x8C\x071\x02\x02\x8C\b\x03\x02\x02\x02\x8D\x8E\x07-\x02\x02\x8E\n' +
    '\x03\x02\x02\x02\x8F\x90\x07/\x02\x02\x90\f\x03\x02\x02\x02\x91\x92\x07' +
    "'\x02\x02\x92\x0E\x03\x02\x02\x02\x93\x94\x07(\x02\x02\x94\x10\x03\x02" +
    '\x02\x02\x95\x96\x07\x80\x02\x02\x96\x12\x03\x02\x02\x02\x97\x98\x07#' +
    '\x02\x02\x98\x14\x03\x02\x02\x02\x99\x9A\x07~\x02\x02\x9A\x16\x03\x02' +
    '\x02\x02\x9B\x9C\x07A\x02\x02\x9C\x18\x03\x02\x02\x02\x9D\x9E\x07<\x02' +
    '\x02\x9E\x1A\x03\x02\x02\x02\x9F\xA0\x07=\x02\x02\xA0\x1C\x03\x02\x02' +
    '\x02\xA1\xA2\x07.\x02\x02\xA2\x1E\x03\x02\x02\x02\xA3\xA4\x070\x02\x02' +
    '\xA4 \x03\x02\x02\x02\xA5\xA6\x07/\x02\x02\xA6\xA7\x07@\x02\x02\xA7"' +
    '\x03\x02\x02\x02\xA8\xA9\x07*\x02\x02\xA9$\x03\x02\x02\x02\xAA\xAB\x07' +
    '+\x02\x02\xAB&\x03\x02\x02\x02\xAC\xAD\x07]\x02\x02\xAD(\x03\x02\x02\x02' +
    '\xAE\xAF\x07_\x02\x02\xAF*\x03\x02\x02\x02\xB0\xB1\x07}\x02\x02\xB1,\x03' +
    '\x02\x02\x02\xB2\xB3\x07\x7F\x02\x02\xB3.\x03\x02\x02\x02\xB4\xB5\x07' +
    '-\x02\x02\xB5\xB6\x07-\x02\x02\xB60\x03\x02\x02\x02\xB7\xB8\x07/\x02\x02' +
    '\xB8\xB9\x07/\x02\x02\xB92\x03\x02\x02\x02\xBA\xBB\x07?\x02\x02\xBB4\x03' +
    '\x02\x02\x02\xBC\xBD\x07,\x02\x02\xBD\xBE\x07?\x02\x02\xBE6\x03\x02\x02' +
    '\x02\xBF\xC0\x071\x02\x02\xC0\xC1\x07?\x02\x02\xC18\x03\x02\x02\x02\xC2' +
    "\xC3\x07'\x02\x02\xC3\xC4\x07?\x02\x02\xC4:\x03\x02\x02\x02\xC5\xC6\x07" +
    '-\x02\x02\xC6\xC7\x07?\x02\x02\xC7<\x03\x02\x02\x02\xC8\xC9\x07/\x02\x02' +
    '\xC9\xCA\x07?\x02\x02\xCA>\x03\x02\x02\x02\xCB\xCC\x07>\x02\x02\xCC\xCD' +
    '\x07>\x02\x02\xCD\xCE\x07?\x02\x02\xCE@\x03\x02\x02\x02\xCF\xD0\x07@\x02' +
    '\x02\xD0\xD1\x07@\x02\x02\xD1\xD2\x07?\x02\x02\xD2B\x03\x02\x02\x02\xD3' +
    '\xD4\x07(\x02\x02\xD4\xD5\x07?\x02\x02\xD5D\x03\x02\x02\x02\xD6\xD7\x07' +
    '`\x02\x02\xD7\xD8\x07?\x02\x02\xD8F\x03\x02\x02\x02\xD9\xDA\x07~\x02\x02' +
    '\xDA\xDB\x07?\x02\x02\xDBH\x03\x02\x02\x02\xDC\xDD\x07(\x02\x02\xDD\xDE' +
    '\x07(\x02\x02\xDEJ\x03\x02\x02\x02\xDF\xE0\x07~\x02\x02\xE0\xE1\x07~\x02' +
    '\x02\xE1L\x03\x02\x02\x02\xE2\xE3\x07?\x02\x02\xE3\xE4\x07?\x02\x02\xE4' +
    'N\x03\x02\x02\x02\xE5\xE6\x07#\x02\x02\xE6\xE7\x07?\x02\x02\xE7P\x03\x02' +
    '\x02\x02\xE8\xE9\x07@\x02\x02\xE9R\x03\x02\x02\x02\xEA\xEB\x07>\x02\x02' +
    '\xEBT\x03\x02\x02\x02\xEC\xED\x07>\x02\x02\xED\xEE\x07?\x02\x02\xEEV\x03' +
    '\x02\x02\x02\xEF\xF0\x07@\x02\x02\xF0\xF1\x07?\x02\x02\xF1X\x03\x02\x02' +
    '\x02\xF2\xF3\x07>\x02\x02\xF3\xF4\x07>\x02\x02\xF4Z\x03\x02\x02\x02\xF5' +
    '\xF6\x07@\x02\x02\xF6\xF7\x07@\x02\x02\xF7\\\x03\x02\x02\x02\xF8\xFA\t' +
    '\x02\x02\x02\xF9\xF8\x03\x02\x02\x02\xFA\xFB\x03\x02\x02\x02\xFB\xF9\x03' +
    '\x02\x02\x02\xFB\xFC\x03\x02\x02\x02\xFC\xFD\x03\x02\x02\x02\xFD\xFE\b' +
    '/\x02\x02\xFE^\x03\x02\x02\x02\xFF\u0100\x07u\x02\x02\u0100\u0101\x07' +
    'k\x02\x02\u0101\u0102\x07|\x02\x02\u0102\u0103\x07g\x02\x02\u0103\u0104' +
    '\x07q\x02\x02\u0104\u0105\x07h\x02\x02\u0105`\x03\x02\x02\x02\u0106\u0107' +
    '\x07x\x02\x02\u0107\u0108\x07q\x02\x02\u0108\u0109\x07k\x02\x02\u0109' +
    '\u010A\x07f\x02\x02\u010Ab\x03\x02\x02\x02\u010B\u010C\x07e\x02\x02\u010C' +
    '\u010D\x07j\x02\x02\u010D\u010E\x07c\x02\x02\u010E\u010F\x07t\x02\x02' +
    '\u010Fd\x03\x02\x02\x02\u0110\u0111\x07u\x02\x02\u0111\u0112\x07j\x02' +
    '\x02\u0112\u0113\x07q\x02\x02\u0113\u0114\x07t\x02\x02\u0114\u0115\x07' +
    'v\x02\x02\u0115f\x03\x02\x02\x02\u0116\u0117\x07k\x02\x02\u0117\u0118' +
    '\x07p\x02\x02\u0118\u0119\x07v\x02\x02\u0119h\x03\x02\x02\x02\u011A\u011B' +
    '\x07n\x02\x02\u011B\u011C\x07q\x02\x02\u011C\u011D\x07p\x02\x02\u011D' +
    '\u011E\x07i\x02\x02\u011Ej\x03\x02\x02\x02\u011F\u0120\x07h\x02\x02\u0120' +
    '\u0121\x07n\x02\x02\u0121\u0122\x07q\x02\x02\u0122\u0123\x07c\x02\x02' +
    '\u0123\u0124\x07v\x02\x02\u0124l\x03\x02\x02\x02\u0125\u0126\x07f\x02' +
    '\x02\u0126\u0127\x07q\x02\x02\u0127\u0128\x07w\x02\x02\u0128\u0129\x07' +
    'd\x02\x02\u0129\u012A\x07n\x02\x02\u012A\u012B\x07g\x02\x02\u012Bn\x03' +
    '\x02\x02\x02\u012C\u012D\x07u\x02\x02\u012D\u012E\x07k\x02\x02\u012E\u012F' +
    '\x07i\x02\x02\u012F\u0130\x07p\x02\x02\u0130\u0131\x07g\x02\x02\u0131' +
    '\u0132\x07f\x02\x02\u0132p\x03\x02\x02\x02\u0133\u0134\x07w\x02\x02\u0134' +
    '\u0135\x07p\x02\x02\u0135\u0136\x07u\x02\x02\u0136\u0137\x07k\x02\x02' +
    '\u0137\u0138\x07i\x02\x02\u0138\u0139\x07p\x02\x02\u0139\u013A\x07g\x02' +
    '\x02\u013A\u013B\x07f\x02\x02\u013Br\x03\x02\x02\x02\u013C\u013D\x07e' +
    '\x02\x02\u013D\u013E\x07q\x02\x02\u013E\u013F\x07p\x02\x02\u013F\u0140' +
    '\x07u\x02\x02\u0140\u0141\x07v\x02\x02\u0141t\x03\x02\x02\x02\u0142\u0143' +
    '\x07x\x02\x02\u0143\u0144\x07q\x02\x02\u0144\u0145\x07n\x02\x02\u0145' +
    '\u0146\x07c\x02\x02\u0146\u0147\x07v\x02\x02\u0147\u0148\x07k\x02\x02' +
    '\u0148\u0149\x07n\x02\x02\u0149\u014A\x07g\x02\x02\u014Av\x03\x02\x02' +
    '\x02\u014B\u014C\t\x03\x02\x02\u014Cx\x03\x02\x02\x02\u014D\u014E\t\x04' +
    '\x02\x02\u014Ez\x03\x02\x02\x02\u014F\u0150\t\x05\x02\x02\u0150|\x03\x02' +
    '\x02\x02\u0151\u0152\t\x06\x02\x02\u0152~\x03\x02\x02\x02\u0153\u0157' +
    '\x05w<\x02\u0154\u0156\x05y=\x02\u0155\u0154\x03\x02\x02\x02\u0156\u0159' +
    '\x03\x02\x02\x02\u0157\u0155\x03\x02\x02\x02\u0157\u0158\x03\x02\x02\x02' +
    '\u0158\x80\x03\x02\x02\x02\u0159\u0157\x03\x02\x02\x02\u015A\u015E\x05' +
    'w<\x02\u015B\u015D\x05y=\x02\u015C\u015B\x03\x02\x02\x02\u015D\u0160\x03' +
    '\x02\x02\x02\u015E\u015C\x03\x02\x02\x02\u015E\u015F\x03\x02\x02\x02\u015F' +
    '\u0161\x03\x02\x02\x02\u0160\u015E\x03\x02\x02\x02\u0161\u0162\x05\x1F' +
    '\x10\x02\u0162\u0166\x05w<\x02\u0163\u0165\x05y=\x02\u0164\u0163\x03\x02' +
    '\x02\x02\u0165\u0168\x03\x02\x02\x02\u0166\u0164\x03\x02\x02\x02\u0166' +
    '\u0167\x03\x02\x02\x02\u0167\x82\x03\x02\x02\x02\u0168\u0166\x03\x02\x02' +
    '\x02\u0169\u016A\x07)\x02\x02\u016A\u016B\x05{>\x02\u016B\u016C\x07)\x02' +
    '\x02\u016C\x84\x03\x02\x02\x02\u016D\u0172\x05}?\x02\u016E\u0171\x05}' +
    '?\x02\u016F\u0171\x05y=\x02\u0170\u016E\x03\x02\x02\x02\u0170\u016F\x03' +
    '\x02\x02\x02\u0171\u0174\x03\x02\x02\x02\u0172\u0170\x03\x02\x02\x02\u0172' +
    '\u0173\x03\x02\x02\x02\u0173\x86\x03\x02\x02\x02\u0174\u0172\x03\x02\x02' +
    '\x02\t\x02\xFB\u0157\u015E\u0166\u0170\u0172\x03\b\x02\x02'
  public static __ATN: ATN
  public static get _ATN(): ATN {
    if (!CalcLexer.__ATN) {
      CalcLexer.__ATN = new ATNDeserializer().deserialize(
        Utils.toCharArray(CalcLexer._serializedATN),
      )
    }

    return CalcLexer.__ATN
  }
}
