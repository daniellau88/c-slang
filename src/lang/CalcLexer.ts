// Generated from ./src/lang/Calc.g4 by ANTLR 4.9.0-SNAPSHOT

import { ATN } from 'antlr4ts/atn/ATN'
import { ATNDeserializer } from 'antlr4ts/atn/ATNDeserializer'
import { LexerATNSimulator } from 'antlr4ts/atn/LexerATNSimulator'
import { CharStream } from 'antlr4ts/CharStream'
import { NotNull } from 'antlr4ts/Decorators'
import { Override } from 'antlr4ts/Decorators'
import { Lexer } from 'antlr4ts/Lexer'
import * as Utils from 'antlr4ts/misc/Utils'
import { RuleContext } from 'antlr4ts/RuleContext'
import { Vocabulary } from 'antlr4ts/Vocabulary'
import { VocabularyImpl } from 'antlr4ts/VocabularyImpl'

export class CalcLexer extends Lexer {
  public static readonly CARET = 1
  public static readonly ASTERICK = 2
  public static readonly BACKSLASH = 3
  public static readonly PLUS = 4
  public static readonly MINUS = 5
  public static readonly PERCENT = 6
  public static readonly AMPERSAND = 7
  public static readonly TILDA = 8
  public static readonly EXCLAMATION_MARK = 9
  public static readonly VERTICAL_BAR = 10
  public static readonly QUESTION_MARK = 11
  public static readonly COLON = 12
  public static readonly SEMICOLON = 13
  public static readonly COMMA = 14
  public static readonly FULLSTOP = 15
  public static readonly RIGHT_ARROW = 16
  public static readonly OPEN_PARENTHESES = 17
  public static readonly CLOSE_PARENTHESES = 18
  public static readonly OPEN_SQUARE_BRACKET = 19
  public static readonly CLOSE_SQUARE_BRACKET = 20
  public static readonly OPEN_CURLY_BRACKET = 21
  public static readonly CLOSE_CURLY_BRACKET = 22
  public static readonly INCREMENT = 23
  public static readonly DECREMENT = 24
  public static readonly EQUAL = 25
  public static readonly TIMES_EQUAL = 26
  public static readonly DIVIDE_EQUAL = 27
  public static readonly MODULO_EQUAL = 28
  public static readonly PLUS_EQUAL = 29
  public static readonly MINUS_EQUAL = 30
  public static readonly SHIFT_LEFT_EQUAL = 31
  public static readonly SHIFT_RIGHT_EQUAL = 32
  public static readonly BITWISE_AND_EQUAL = 33
  public static readonly BITWISE_XOR_EQUAL = 34
  public static readonly BITWISE_OR_EQUAL = 35
  public static readonly BOOLEAN_AND = 36
  public static readonly BOOLEAN_OR = 37
  public static readonly EQUALITY_EQUAL = 38
  public static readonly EQUALITY_NOT_EQUAL = 39
  public static readonly RELATIONAL_GREATER_THAN = 40
  public static readonly RELATIONAL_LESS_THAN = 41
  public static readonly RELATIONAL_LESS_THAN_OR_EQUAL = 42
  public static readonly RELATIONAL_GREATER_THAN_OR_EQUAL = 43
  public static readonly SHIFT_LEFT = 44
  public static readonly SHIFT_RIGHT = 45
  public static readonly WHITESPACE = 46
  public static readonly VAR_ARG = 47
  public static readonly SIZE_OF = 48
  public static readonly CASE = 49
  public static readonly DEFAULT = 50
  public static readonly IF = 51
  public static readonly ELSE = 52
  public static readonly SWITCH = 53
  public static readonly WHILE = 54
  public static readonly DO = 55
  public static readonly FOR = 56
  public static readonly GOTO = 57
  public static readonly CONTINUE = 58
  public static readonly BREAK = 59
  public static readonly RETURN = 60
  public static readonly STRUCT = 61
  public static readonly UNION = 62
  public static readonly COMMENT = 63
  public static readonly LINE_COMMENT = 64
  public static readonly VOID_TYPE_SPECIFIER = 65
  public static readonly CHAR_TYPE_SPECIFIER = 66
  public static readonly SHORT_TYPE_SPECIFIER = 67
  public static readonly INT_TYPE_SPECIFIER = 68
  public static readonly LONG_TYPE_SPECIFIER = 69
  public static readonly FLOAT_TYPE_SPECIFIER = 70
  public static readonly DOUBLE_TYPE_SPECIFIER = 71
  public static readonly SIGNED_TYPE_SPECIFIER = 72
  public static readonly UNSIGNED_TYPE_SPECIFIER = 73
  public static readonly CONST_TYPE_QUALIFIER = 74
  public static readonly VOLATILE_TYPE_QUALIFIER = 75
  public static readonly INTEGER = 76
  public static readonly FLOAT = 77
  public static readonly CHAR = 78
  public static readonly STRING = 79
  public static readonly IDENTIFIER = 80

  // tslint:disable:no-trailing-whitespace
  public static readonly channelNames: string[] = ['DEFAULT_TOKEN_CHANNEL', 'HIDDEN']

  // tslint:disable:no-trailing-whitespace
  public static readonly modeNames: string[] = ['DEFAULT_MODE']

  public static readonly ruleNames: string[] = [
    'CARET',
    'ASTERICK',
    'BACKSLASH',
    'PLUS',
    'MINUS',
    'PERCENT',
    'AMPERSAND',
    'TILDA',
    'EXCLAMATION_MARK',
    'VERTICAL_BAR',
    'QUESTION_MARK',
    'COLON',
    'SEMICOLON',
    'COMMA',
    'FULLSTOP',
    'RIGHT_ARROW',
    'OPEN_PARENTHESES',
    'CLOSE_PARENTHESES',
    'OPEN_SQUARE_BRACKET',
    'CLOSE_SQUARE_BRACKET',
    'OPEN_CURLY_BRACKET',
    'CLOSE_CURLY_BRACKET',
    'INCREMENT',
    'DECREMENT',
    'EQUAL',
    'TIMES_EQUAL',
    'DIVIDE_EQUAL',
    'MODULO_EQUAL',
    'PLUS_EQUAL',
    'MINUS_EQUAL',
    'SHIFT_LEFT_EQUAL',
    'SHIFT_RIGHT_EQUAL',
    'BITWISE_AND_EQUAL',
    'BITWISE_XOR_EQUAL',
    'BITWISE_OR_EQUAL',
    'BOOLEAN_AND',
    'BOOLEAN_OR',
    'EQUALITY_EQUAL',
    'EQUALITY_NOT_EQUAL',
    'RELATIONAL_GREATER_THAN',
    'RELATIONAL_LESS_THAN',
    'RELATIONAL_LESS_THAN_OR_EQUAL',
    'RELATIONAL_GREATER_THAN_OR_EQUAL',
    'SHIFT_LEFT',
    'SHIFT_RIGHT',
    'WHITESPACE',
    'VAR_ARG',
    'SIZE_OF',
    'CASE',
    'DEFAULT',
    'IF',
    'ELSE',
    'SWITCH',
    'WHILE',
    'DO',
    'FOR',
    'GOTO',
    'CONTINUE',
    'BREAK',
    'RETURN',
    'STRUCT',
    'UNION',
    'COMMENT',
    'LINE_COMMENT',
    'VOID_TYPE_SPECIFIER',
    'CHAR_TYPE_SPECIFIER',
    'SHORT_TYPE_SPECIFIER',
    'INT_TYPE_SPECIFIER',
    'LONG_TYPE_SPECIFIER',
    'FLOAT_TYPE_SPECIFIER',
    'DOUBLE_TYPE_SPECIFIER',
    'SIGNED_TYPE_SPECIFIER',
    'UNSIGNED_TYPE_SPECIFIER',
    'CONST_TYPE_QUALIFIER',
    'VOLATILE_TYPE_QUALIFIER',
    'NON_ZERO_DIGIT',
    'DIGIT',
    'ALPHABET',
    'ALPHABET_AND_UNDERSCORE',
    'ZERO_DIGIT',
    'ESCAPE_CHAR',
    'S_CHAR',
    'INTEGER',
    'FLOAT',
    'CHAR',
    'STRING',
    'IDENTIFIER',
  ]

  private static readonly _LITERAL_NAMES: Array<string | undefined> = [
    undefined,
    "'^'",
    "'*'",
    "'/'",
    "'+'",
    "'-'",
    "'%'",
    "'&'",
    "'~'",
    "'!'",
    "'|'",
    "'?'",
    "':'",
    "';'",
    "','",
    "'.'",
    "'->'",
    "'('",
    "')'",
    "'['",
    "']'",
    "'{'",
    "'}'",
    "'++'",
    "'--'",
    "'='",
    "'*='",
    "'/='",
    "'%='",
    "'+='",
    "'-='",
    "'<<='",
    "'>>='",
    "'&='",
    "'^='",
    "'|='",
    "'&&'",
    "'||'",
    "'=='",
    "'!='",
    "'>'",
    "'<'",
    "'<='",
    "'>='",
    "'<<'",
    "'>>'",
    undefined,
    "'...'",
    "'sizeof'",
    "'case'",
    "'default'",
    "'if'",
    "'else'",
    "'switch'",
    "'while'",
    "'do'",
    "'for'",
    "'goto'",
    "'continue'",
    "'break'",
    "'return'",
    "'struct'",
    "'union'",
    undefined,
    undefined,
    "'void'",
    "'char'",
    "'short'",
    "'int'",
    "'long'",
    "'float'",
    "'double'",
    "'signed'",
    "'unsigned'",
    "'const'",
    "'volatile'",
  ]
  private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
    undefined,
    'CARET',
    'ASTERICK',
    'BACKSLASH',
    'PLUS',
    'MINUS',
    'PERCENT',
    'AMPERSAND',
    'TILDA',
    'EXCLAMATION_MARK',
    'VERTICAL_BAR',
    'QUESTION_MARK',
    'COLON',
    'SEMICOLON',
    'COMMA',
    'FULLSTOP',
    'RIGHT_ARROW',
    'OPEN_PARENTHESES',
    'CLOSE_PARENTHESES',
    'OPEN_SQUARE_BRACKET',
    'CLOSE_SQUARE_BRACKET',
    'OPEN_CURLY_BRACKET',
    'CLOSE_CURLY_BRACKET',
    'INCREMENT',
    'DECREMENT',
    'EQUAL',
    'TIMES_EQUAL',
    'DIVIDE_EQUAL',
    'MODULO_EQUAL',
    'PLUS_EQUAL',
    'MINUS_EQUAL',
    'SHIFT_LEFT_EQUAL',
    'SHIFT_RIGHT_EQUAL',
    'BITWISE_AND_EQUAL',
    'BITWISE_XOR_EQUAL',
    'BITWISE_OR_EQUAL',
    'BOOLEAN_AND',
    'BOOLEAN_OR',
    'EQUALITY_EQUAL',
    'EQUALITY_NOT_EQUAL',
    'RELATIONAL_GREATER_THAN',
    'RELATIONAL_LESS_THAN',
    'RELATIONAL_LESS_THAN_OR_EQUAL',
    'RELATIONAL_GREATER_THAN_OR_EQUAL',
    'SHIFT_LEFT',
    'SHIFT_RIGHT',
    'WHITESPACE',
    'VAR_ARG',
    'SIZE_OF',
    'CASE',
    'DEFAULT',
    'IF',
    'ELSE',
    'SWITCH',
    'WHILE',
    'DO',
    'FOR',
    'GOTO',
    'CONTINUE',
    'BREAK',
    'RETURN',
    'STRUCT',
    'UNION',
    'COMMENT',
    'LINE_COMMENT',
    'VOID_TYPE_SPECIFIER',
    'CHAR_TYPE_SPECIFIER',
    'SHORT_TYPE_SPECIFIER',
    'INT_TYPE_SPECIFIER',
    'LONG_TYPE_SPECIFIER',
    'FLOAT_TYPE_SPECIFIER',
    'DOUBLE_TYPE_SPECIFIER',
    'SIGNED_TYPE_SPECIFIER',
    'UNSIGNED_TYPE_SPECIFIER',
    'CONST_TYPE_QUALIFIER',
    'VOLATILE_TYPE_QUALIFIER',
    'INTEGER',
    'FLOAT',
    'CHAR',
    'STRING',
    'IDENTIFIER',
  ]
  public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(
    CalcLexer._LITERAL_NAMES,
    CalcLexer._SYMBOLIC_NAMES,
    [],
  )

  // @Override
  // @NotNull
  public get vocabulary(): Vocabulary {
    return CalcLexer.VOCABULARY
  }
  // tslint:enable:no-trailing-whitespace

  constructor(input: CharStream) {
    super(input)
    this._interp = new LexerATNSimulator(CalcLexer._ATN, this)
  }

  // @Override
  public get grammarFileName(): string {
    return 'Calc.g4'
  }

  // @Override
  public get ruleNames(): string[] {
    return CalcLexer.ruleNames
  }

  // @Override
  public get serializedATN(): string {
    return CalcLexer._serializedATN
  }

  // @Override
  public get channelNames(): string[] {
    return CalcLexer.channelNames
  }

  // @Override
  public get modeNames(): string[] {
    return CalcLexer.modeNames
  }

  public static readonly _serializedATN: string =
    '\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02R\u021B\b\x01' +
    '\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06' +
    '\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r' +
    '\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t' +
    '\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t' +
    '\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t' +
    '\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04"\t' +
    "\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04'\t'\x04(\t(\x04)\t)\x04*\t*\x04" +
    '+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04' +
    '4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04' +
    '=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04' +
    'F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04' +
    'O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04' +
    'X\tX\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03' +
    '\x06\x03\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\v' +
    '\x03\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10' +
    '\x03\x10\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14' +
    '\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18' +
    '\x03\x18\x03\x19\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1B' +
    '\x03\x1C\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1E' +
    '\x03\x1F\x03\x1F\x03\x1F\x03 \x03 \x03 \x03 \x03!\x03!\x03!\x03!\x03"' +
    '\x03"\x03"\x03#\x03#\x03#\x03$\x03$\x03$\x03%\x03%\x03%\x03&\x03&\x03' +
    "&\x03'\x03'\x03'\x03(\x03(\x03(\x03)\x03)\x03*\x03*\x03+\x03+\x03+" +
    '\x03,\x03,\x03,\x03-\x03-\x03-\x03.\x03.\x03.\x03/\x06/\u0124\n/\r/\x0E' +
    '/\u0125\x03/\x03/\x030\x030\x030\x030\x031\x031\x031\x031\x031\x031\x03' +
    '1\x032\x032\x032\x032\x032\x033\x033\x033\x033\x033\x033\x033\x033\x03' +
    '4\x034\x034\x035\x035\x035\x035\x035\x036\x036\x036\x036\x036\x036\x03' +
    '6\x037\x037\x037\x037\x037\x037\x038\x038\x038\x039\x039\x039\x039\x03' +
    ':\x03:\x03:\x03:\x03:\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x03;\x03' +
    '<\x03<\x03<\x03<\x03<\x03<\x03=\x03=\x03=\x03=\x03=\x03=\x03=\x03>\x03' +
    '>\x03>\x03>\x03>\x03>\x03>\x03?\x03?\x03?\x03?\x03?\x03?\x03@\x03@\x03' +
    '@\x03@\x07@\u018A\n@\f@\x0E@\u018D\v@\x03@\x03@\x03@\x03@\x03@\x03A\x03' +
    'A\x03A\x03A\x07A\u0198\nA\fA\x0EA\u019B\vA\x03A\x03A\x03B\x03B\x03B\x03' +
    'B\x03B\x03C\x03C\x03C\x03C\x03C\x03D\x03D\x03D\x03D\x03D\x03D\x03E\x03' +
    'E\x03E\x03E\x03F\x03F\x03F\x03F\x03F\x03G\x03G\x03G\x03G\x03G\x03G\x03' +
    'H\x03H\x03H\x03H\x03H\x03H\x03H\x03I\x03I\x03I\x03I\x03I\x03I\x03I\x03' +
    'J\x03J\x03J\x03J\x03J\x03J\x03J\x03J\x03J\x03K\x03K\x03K\x03K\x03K\x03' +
    'K\x03L\x03L\x03L\x03L\x03L\x03L\x03L\x03L\x03L\x03M\x03M\x03N\x03N\x03' +
    'O\x03O\x03P\x03P\x03Q\x03Q\x03R\x03R\x03R\x03S\x03S\x05S\u01F3\nS\x03' +
    'T\x03T\x07T\u01F7\nT\fT\x0ET\u01FA\vT\x03T\x05T\u01FD\nT\x03U\x03U\x03' +
    'U\x07U\u0202\nU\fU\x0EU\u0205\vU\x03V\x03V\x03V\x03V\x03W\x03W\x07W\u020D' +
    '\nW\fW\x0EW\u0210\vW\x03W\x03W\x03X\x03X\x03X\x07X\u0217\nX\fX\x0EX\u021A' +
    '\vX\x03\u018B\x02\x02Y\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v' +
    '\x02\x07\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19' +
    '\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14' +
    "'\x02\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B5\x02" +
    '\x1C7\x02\x1D9\x02\x1E;\x02\x1F=\x02 ?\x02!A\x02"C\x02#E\x02$G\x02%I' +
    "\x02&K\x02'M\x02(O\x02)Q\x02*S\x02+U\x02,W\x02-Y\x02.[\x02/]\x020_\x02" +
    '1a\x022c\x023e\x024g\x025i\x026k\x027m\x028o\x029q\x02:s\x02;u\x02<w\x02' +
    '=y\x02>{\x02?}\x02@\x7F\x02A\x81\x02B\x83\x02C\x85\x02D\x87\x02E\x89\x02' +
    'F\x8B\x02G\x8D\x02H\x8F\x02I\x91\x02J\x93\x02K\x95\x02L\x97\x02M\x99\x02' +
    '\x02\x9B\x02\x02\x9D\x02\x02\x9F\x02\x02\xA1\x02\x02\xA3\x02\x02\xA5\x02' +
    '\x02\xA7\x02N\xA9\x02O\xAB\x02P\xAD\x02Q\xAF\x02R\x03\x02\v\x05\x02\v' +
    '\f\x0F\x0F""\x04\x02\f\f\x0F\x0F\x03\x023;\x03\x022;\x04\x02C\\c|\x05' +
    '\x02C\\aac|\x03\x0222\r\x02$$))22AA^^cdhhppttvvxx\x06\x02\f\f\x0F\x0F' +
    '$$^^\x02\u021D\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07' +
    '\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03' +
    '\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03' +
    '\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03' +
    '\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03' +
    '\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02' +
    "\x02\x02'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02" +
    '-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02' +
    '\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02' +
    '\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03' +
    '\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02' +
    '\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x02' +
    'O\x03\x02\x02\x02\x02Q\x03\x02\x02\x02\x02S\x03\x02\x02\x02\x02U\x03\x02' +
    '\x02\x02\x02W\x03\x02\x02\x02\x02Y\x03\x02\x02\x02\x02[\x03\x02\x02\x02' +
    '\x02]\x03\x02\x02\x02\x02_\x03\x02\x02\x02\x02a\x03\x02\x02\x02\x02c\x03' +
    '\x02\x02\x02\x02e\x03\x02\x02\x02\x02g\x03\x02\x02\x02\x02i\x03\x02\x02' +
    '\x02\x02k\x03\x02\x02\x02\x02m\x03\x02\x02\x02\x02o\x03\x02\x02\x02\x02' +
    'q\x03\x02\x02\x02\x02s\x03\x02\x02\x02\x02u\x03\x02\x02\x02\x02w\x03\x02' +
    '\x02\x02\x02y\x03\x02\x02\x02\x02{\x03\x02\x02\x02\x02}\x03\x02\x02\x02' +
    '\x02\x7F\x03\x02\x02\x02\x02\x81\x03\x02\x02\x02\x02\x83\x03\x02\x02\x02' +
    '\x02\x85\x03\x02\x02\x02\x02\x87\x03\x02\x02\x02\x02\x89\x03\x02\x02\x02' +
    '\x02\x8B\x03\x02\x02\x02\x02\x8D\x03\x02\x02\x02\x02\x8F\x03\x02\x02\x02' +
    '\x02\x91\x03\x02\x02\x02\x02\x93\x03\x02\x02\x02\x02\x95\x03\x02\x02\x02' +
    '\x02\x97\x03\x02\x02\x02\x02\xA7\x03\x02\x02\x02\x02\xA9\x03\x02\x02\x02' +
    '\x02\xAB\x03\x02\x02\x02\x02\xAD\x03\x02\x02\x02\x02\xAF\x03\x02\x02\x02' +
    '\x03\xB1\x03\x02\x02\x02\x05\xB3\x03\x02\x02\x02\x07\xB5\x03\x02\x02\x02' +
    '\t\xB7\x03\x02\x02\x02\v\xB9\x03\x02\x02\x02\r\xBB\x03\x02\x02\x02\x0F' +
    '\xBD\x03\x02\x02\x02\x11\xBF\x03\x02\x02\x02\x13\xC1\x03\x02\x02\x02\x15' +
    '\xC3\x03\x02\x02\x02\x17\xC5\x03\x02\x02\x02\x19\xC7\x03\x02\x02\x02\x1B' +
    '\xC9\x03\x02\x02\x02\x1D\xCB\x03\x02\x02\x02\x1F\xCD\x03\x02\x02\x02!' +
    "\xCF\x03\x02\x02\x02#\xD2\x03\x02\x02\x02%\xD4\x03\x02\x02\x02'\xD6\x03" +
    '\x02\x02\x02)\xD8\x03\x02\x02\x02+\xDA\x03\x02\x02\x02-\xDC\x03\x02\x02' +
    '\x02/\xDE\x03\x02\x02\x021\xE1\x03\x02\x02\x023\xE4\x03\x02\x02\x025\xE6' +
    '\x03\x02\x02\x027\xE9\x03\x02\x02\x029\xEC\x03\x02\x02\x02;\xEF\x03\x02' +
    '\x02\x02=\xF2\x03\x02\x02\x02?\xF5\x03\x02\x02\x02A\xF9\x03\x02\x02\x02' +
    'C\xFD\x03\x02\x02\x02E\u0100\x03\x02\x02\x02G\u0103\x03\x02\x02\x02I\u0106' +
    '\x03\x02\x02\x02K\u0109\x03\x02\x02\x02M\u010C\x03\x02\x02\x02O\u010F' +
    '\x03\x02\x02\x02Q\u0112\x03\x02\x02\x02S\u0114\x03\x02\x02\x02U\u0116' +
    '\x03\x02\x02\x02W\u0119\x03\x02\x02\x02Y\u011C\x03\x02\x02\x02[\u011F' +
    '\x03\x02\x02\x02]\u0123\x03\x02\x02\x02_\u0129\x03\x02\x02\x02a\u012D' +
    '\x03\x02\x02\x02c\u0134\x03\x02\x02\x02e\u0139\x03\x02\x02\x02g\u0141' +
    '\x03\x02\x02\x02i\u0144\x03\x02\x02\x02k\u0149\x03\x02\x02\x02m\u0150' +
    '\x03\x02\x02\x02o\u0156\x03\x02\x02\x02q\u0159\x03\x02\x02\x02s\u015D' +
    '\x03\x02\x02\x02u\u0162\x03\x02\x02\x02w\u016B\x03\x02\x02\x02y\u0171' +
    '\x03\x02\x02\x02{\u0178\x03\x02\x02\x02}\u017F\x03\x02\x02\x02\x7F\u0185' +
    '\x03\x02\x02\x02\x81\u0193\x03\x02\x02\x02\x83\u019E\x03\x02\x02\x02\x85' +
    '\u01A3\x03\x02\x02\x02\x87\u01A8\x03\x02\x02\x02\x89\u01AE\x03\x02\x02' +
    '\x02\x8B\u01B2\x03\x02\x02\x02\x8D\u01B7\x03\x02\x02\x02\x8F\u01BD\x03' +
    '\x02\x02\x02\x91\u01C4\x03\x02\x02\x02\x93\u01CB\x03\x02\x02\x02\x95\u01D4' +
    '\x03\x02\x02\x02\x97\u01DA\x03\x02\x02\x02\x99\u01E3\x03\x02\x02\x02\x9B' +
    '\u01E5\x03\x02\x02\x02\x9D\u01E7\x03\x02\x02\x02\x9F\u01E9\x03\x02\x02' +
    '\x02\xA1\u01EB\x03\x02\x02\x02\xA3\u01ED\x03\x02\x02\x02\xA5\u01F2\x03' +
    '\x02\x02\x02\xA7\u01FC\x03\x02\x02\x02\xA9\u01FE\x03\x02\x02\x02\xAB\u0206' +
    '\x03\x02\x02\x02\xAD\u020A\x03\x02\x02\x02\xAF\u0213\x03\x02\x02\x02\xB1' +
    '\xB2\x07`\x02\x02\xB2\x04\x03\x02\x02\x02\xB3\xB4\x07,\x02\x02\xB4\x06' +
    '\x03\x02\x02\x02\xB5\xB6\x071\x02\x02\xB6\b\x03\x02\x02\x02\xB7\xB8\x07' +
    '-\x02\x02\xB8\n\x03\x02\x02\x02\xB9\xBA\x07/\x02\x02\xBA\f\x03\x02\x02' +
    "\x02\xBB\xBC\x07'\x02\x02\xBC\x0E\x03\x02\x02\x02\xBD\xBE\x07(\x02\x02" +
    '\xBE\x10\x03\x02\x02\x02\xBF\xC0\x07\x80\x02\x02\xC0\x12\x03\x02\x02\x02' +
    '\xC1\xC2\x07#\x02\x02\xC2\x14\x03\x02\x02\x02\xC3\xC4\x07~\x02\x02\xC4' +
    '\x16\x03\x02\x02\x02\xC5\xC6\x07A\x02\x02\xC6\x18\x03\x02\x02\x02\xC7' +
    '\xC8\x07<\x02\x02\xC8\x1A\x03\x02\x02\x02\xC9\xCA\x07=\x02\x02\xCA\x1C' +
    '\x03\x02\x02\x02\xCB\xCC\x07.\x02\x02\xCC\x1E\x03\x02\x02\x02\xCD\xCE' +
    '\x070\x02\x02\xCE \x03\x02\x02\x02\xCF\xD0\x07/\x02\x02\xD0\xD1\x07@\x02' +
    '\x02\xD1"\x03\x02\x02\x02\xD2\xD3\x07*\x02\x02\xD3$\x03\x02\x02\x02\xD4' +
    '\xD5\x07+\x02\x02\xD5&\x03\x02\x02\x02\xD6\xD7\x07]\x02\x02\xD7(\x03\x02' +
    '\x02\x02\xD8\xD9\x07_\x02\x02\xD9*\x03\x02\x02\x02\xDA\xDB\x07}\x02\x02' +
    '\xDB,\x03\x02\x02\x02\xDC\xDD\x07\x7F\x02\x02\xDD.\x03\x02\x02\x02\xDE' +
    '\xDF\x07-\x02\x02\xDF\xE0\x07-\x02\x02\xE00\x03\x02\x02\x02\xE1\xE2\x07' +
    '/\x02\x02\xE2\xE3\x07/\x02\x02\xE32\x03\x02\x02\x02\xE4\xE5\x07?\x02\x02' +
    '\xE54\x03\x02\x02\x02\xE6\xE7\x07,\x02\x02\xE7\xE8\x07?\x02\x02\xE86\x03' +
    '\x02\x02\x02\xE9\xEA\x071\x02\x02\xEA\xEB\x07?\x02\x02\xEB8\x03\x02\x02' +
    "\x02\xEC\xED\x07'\x02\x02\xED\xEE\x07?\x02\x02\xEE:\x03\x02\x02\x02\xEF" +
    '\xF0\x07-\x02\x02\xF0\xF1\x07?\x02\x02\xF1<\x03\x02\x02\x02\xF2\xF3\x07' +
    '/\x02\x02\xF3\xF4\x07?\x02\x02\xF4>\x03\x02\x02\x02\xF5\xF6\x07>\x02\x02' +
    '\xF6\xF7\x07>\x02\x02\xF7\xF8\x07?\x02\x02\xF8@\x03\x02\x02\x02\xF9\xFA' +
    '\x07@\x02\x02\xFA\xFB\x07@\x02\x02\xFB\xFC\x07?\x02\x02\xFCB\x03\x02\x02' +
    '\x02\xFD\xFE\x07(\x02\x02\xFE\xFF\x07?\x02\x02\xFFD\x03\x02\x02\x02\u0100' +
    '\u0101\x07`\x02\x02\u0101\u0102\x07?\x02\x02\u0102F\x03\x02\x02\x02\u0103' +
    '\u0104\x07~\x02\x02\u0104\u0105\x07?\x02\x02\u0105H\x03\x02\x02\x02\u0106' +
    '\u0107\x07(\x02\x02\u0107\u0108\x07(\x02\x02\u0108J\x03\x02\x02\x02\u0109' +
    '\u010A\x07~\x02\x02\u010A\u010B\x07~\x02\x02\u010BL\x03\x02\x02\x02\u010C' +
    '\u010D\x07?\x02\x02\u010D\u010E\x07?\x02\x02\u010EN\x03\x02\x02\x02\u010F' +
    '\u0110\x07#\x02\x02\u0110\u0111\x07?\x02\x02\u0111P\x03\x02\x02\x02\u0112' +
    '\u0113\x07@\x02\x02\u0113R\x03\x02\x02\x02\u0114\u0115\x07>\x02\x02\u0115' +
    'T\x03\x02\x02\x02\u0116\u0117\x07>\x02\x02\u0117\u0118\x07?\x02\x02\u0118' +
    'V\x03\x02\x02\x02\u0119\u011A\x07@\x02\x02\u011A\u011B\x07?\x02\x02\u011B' +
    'X\x03\x02\x02\x02\u011C\u011D\x07>\x02\x02\u011D\u011E\x07>\x02\x02\u011E' +
    'Z\x03\x02\x02\x02\u011F\u0120\x07@\x02\x02\u0120\u0121\x07@\x02\x02\u0121' +
    '\\\x03\x02\x02\x02\u0122\u0124\t\x02\x02\x02\u0123\u0122\x03\x02\x02\x02' +
    '\u0124\u0125\x03\x02\x02\x02\u0125\u0123\x03\x02\x02\x02\u0125\u0126\x03' +
    '\x02\x02\x02\u0126\u0127\x03\x02\x02\x02\u0127\u0128\b/\x02\x02\u0128' +
    '^\x03\x02\x02\x02\u0129\u012A\x070\x02\x02\u012A\u012B\x070\x02\x02\u012B' +
    '\u012C\x070\x02\x02\u012C`\x03\x02\x02\x02\u012D\u012E\x07u\x02\x02\u012E' +
    '\u012F\x07k\x02\x02\u012F\u0130\x07|\x02\x02\u0130\u0131\x07g\x02\x02' +
    '\u0131\u0132\x07q\x02\x02\u0132\u0133\x07h\x02\x02\u0133b\x03\x02\x02' +
    '\x02\u0134\u0135\x07e\x02\x02\u0135\u0136\x07c\x02\x02\u0136\u0137\x07' +
    'u\x02\x02\u0137\u0138\x07g\x02\x02\u0138d\x03\x02\x02\x02\u0139\u013A' +
    '\x07f\x02\x02\u013A\u013B\x07g\x02\x02\u013B\u013C\x07h\x02\x02\u013C' +
    '\u013D\x07c\x02\x02\u013D\u013E\x07w\x02\x02\u013E\u013F\x07n\x02\x02' +
    '\u013F\u0140\x07v\x02\x02\u0140f\x03\x02\x02\x02\u0141\u0142\x07k\x02' +
    '\x02\u0142\u0143\x07h\x02\x02\u0143h\x03\x02\x02\x02\u0144\u0145\x07g' +
    '\x02\x02\u0145\u0146\x07n\x02\x02\u0146\u0147\x07u\x02\x02\u0147\u0148' +
    '\x07g\x02\x02\u0148j\x03\x02\x02\x02\u0149\u014A\x07u\x02\x02\u014A\u014B' +
    '\x07y\x02\x02\u014B\u014C\x07k\x02\x02\u014C\u014D\x07v\x02\x02\u014D' +
    '\u014E\x07e\x02\x02\u014E\u014F\x07j\x02\x02\u014Fl\x03\x02\x02\x02\u0150' +
    '\u0151\x07y\x02\x02\u0151\u0152\x07j\x02\x02\u0152\u0153\x07k\x02\x02' +
    '\u0153\u0154\x07n\x02\x02\u0154\u0155\x07g\x02\x02\u0155n\x03\x02\x02' +
    '\x02\u0156\u0157\x07f\x02\x02\u0157\u0158\x07q\x02\x02\u0158p\x03\x02' +
    '\x02\x02\u0159\u015A\x07h\x02\x02\u015A\u015B\x07q\x02\x02\u015B\u015C' +
    '\x07t\x02\x02\u015Cr\x03\x02\x02\x02\u015D\u015E\x07i\x02\x02\u015E\u015F' +
    '\x07q\x02\x02\u015F\u0160\x07v\x02\x02\u0160\u0161\x07q\x02\x02\u0161' +
    't\x03\x02\x02\x02\u0162\u0163\x07e\x02\x02\u0163\u0164\x07q\x02\x02\u0164' +
    '\u0165\x07p\x02\x02\u0165\u0166\x07v\x02\x02\u0166\u0167\x07k\x02\x02' +
    '\u0167\u0168\x07p\x02\x02\u0168\u0169\x07w\x02\x02\u0169\u016A\x07g\x02' +
    '\x02\u016Av\x03\x02\x02\x02\u016B\u016C\x07d\x02\x02\u016C\u016D\x07t' +
    '\x02\x02\u016D\u016E\x07g\x02\x02\u016E\u016F\x07c\x02\x02\u016F\u0170' +
    '\x07m\x02\x02\u0170x\x03\x02\x02\x02\u0171\u0172\x07t\x02\x02\u0172\u0173' +
    '\x07g\x02\x02\u0173\u0174\x07v\x02\x02\u0174\u0175\x07w\x02\x02\u0175' +
    '\u0176\x07t\x02\x02\u0176\u0177\x07p\x02\x02\u0177z\x03\x02\x02\x02\u0178' +
    '\u0179\x07u\x02\x02\u0179\u017A\x07v\x02\x02\u017A\u017B\x07t\x02\x02' +
    '\u017B\u017C\x07w\x02\x02\u017C\u017D\x07e\x02\x02\u017D\u017E\x07v\x02' +
    '\x02\u017E|\x03\x02\x02\x02\u017F\u0180\x07w\x02\x02\u0180\u0181\x07p' +
    '\x02\x02\u0181\u0182\x07k\x02\x02\u0182\u0183\x07q\x02\x02\u0183\u0184' +
    '\x07p\x02\x02\u0184~\x03\x02\x02\x02\u0185\u0186\x071\x02\x02\u0186\u0187' +
    '\x07,\x02\x02\u0187\u018B\x03\x02\x02\x02\u0188\u018A\v\x02\x02\x02\u0189' +
    '\u0188\x03\x02\x02\x02\u018A\u018D\x03\x02\x02\x02\u018B\u018C\x03\x02' +
    '\x02\x02\u018B\u0189\x03\x02\x02\x02\u018C\u018E\x03\x02\x02\x02\u018D' +
    '\u018B\x03\x02\x02\x02\u018E\u018F\x07,\x02\x02\u018F\u0190\x071\x02\x02' +
    '\u0190\u0191\x03\x02\x02\x02\u0191\u0192\b@\x02\x02\u0192\x80\x03\x02' +
    '\x02\x02\u0193\u0194\x071\x02\x02\u0194\u0195\x071\x02\x02\u0195\u0199' +
    '\x03\x02\x02\x02\u0196\u0198\n\x03\x02\x02\u0197\u0196\x03\x02\x02\x02' +
    '\u0198\u019B\x03\x02\x02\x02\u0199\u0197\x03\x02\x02\x02\u0199\u019A\x03' +
    '\x02\x02\x02\u019A\u019C\x03\x02\x02\x02\u019B\u0199\x03\x02\x02\x02\u019C' +
    '\u019D\bA\x02\x02\u019D\x82\x03\x02\x02\x02\u019E\u019F\x07x\x02\x02\u019F' +
    '\u01A0\x07q\x02\x02\u01A0\u01A1\x07k\x02\x02\u01A1\u01A2\x07f\x02\x02' +
    '\u01A2\x84\x03\x02\x02\x02\u01A3\u01A4\x07e\x02\x02\u01A4\u01A5\x07j\x02' +
    '\x02\u01A5\u01A6\x07c\x02\x02\u01A6\u01A7\x07t\x02\x02\u01A7\x86\x03\x02' +
    '\x02\x02\u01A8\u01A9\x07u\x02\x02\u01A9\u01AA\x07j\x02\x02\u01AA\u01AB' +
    '\x07q\x02\x02\u01AB\u01AC\x07t\x02\x02\u01AC\u01AD\x07v\x02\x02\u01AD' +
    '\x88\x03\x02\x02\x02\u01AE\u01AF\x07k\x02\x02\u01AF\u01B0\x07p\x02\x02' +
    '\u01B0\u01B1\x07v\x02\x02\u01B1\x8A\x03\x02\x02\x02\u01B2\u01B3\x07n\x02' +
    '\x02\u01B3\u01B4\x07q\x02\x02\u01B4\u01B5\x07p\x02\x02\u01B5\u01B6\x07' +
    'i\x02\x02\u01B6\x8C\x03\x02\x02\x02\u01B7\u01B8\x07h\x02\x02\u01B8\u01B9' +
    '\x07n\x02\x02\u01B9\u01BA\x07q\x02\x02\u01BA\u01BB\x07c\x02\x02\u01BB' +
    '\u01BC\x07v\x02\x02\u01BC\x8E\x03\x02\x02\x02\u01BD\u01BE\x07f\x02\x02' +
    '\u01BE\u01BF\x07q\x02\x02\u01BF\u01C0\x07w\x02\x02\u01C0\u01C1\x07d\x02' +
    '\x02\u01C1\u01C2\x07n\x02\x02\u01C2\u01C3\x07g\x02\x02\u01C3\x90\x03\x02' +
    '\x02\x02\u01C4\u01C5\x07u\x02\x02\u01C5\u01C6\x07k\x02\x02\u01C6\u01C7' +
    '\x07i\x02\x02\u01C7\u01C8\x07p\x02\x02\u01C8\u01C9\x07g\x02\x02\u01C9' +
    '\u01CA\x07f\x02\x02\u01CA\x92\x03\x02\x02\x02\u01CB\u01CC\x07w\x02\x02' +
    '\u01CC\u01CD\x07p\x02\x02\u01CD\u01CE\x07u\x02\x02\u01CE\u01CF\x07k\x02' +
    '\x02\u01CF\u01D0\x07i\x02\x02\u01D0\u01D1\x07p\x02\x02\u01D1\u01D2\x07' +
    'g\x02\x02\u01D2\u01D3\x07f\x02\x02\u01D3\x94\x03\x02\x02\x02\u01D4\u01D5' +
    '\x07e\x02\x02\u01D5\u01D6\x07q\x02\x02\u01D6\u01D7\x07p\x02\x02\u01D7' +
    '\u01D8\x07u\x02\x02\u01D8\u01D9\x07v\x02\x02\u01D9\x96\x03\x02\x02\x02' +
    '\u01DA\u01DB\x07x\x02\x02\u01DB\u01DC\x07q\x02\x02\u01DC\u01DD\x07n\x02' +
    '\x02\u01DD\u01DE\x07c\x02\x02\u01DE\u01DF\x07v\x02\x02\u01DF\u01E0\x07' +
    'k\x02\x02\u01E0\u01E1\x07n\x02\x02\u01E1\u01E2\x07g\x02\x02\u01E2\x98' +
    '\x03\x02\x02\x02\u01E3\u01E4\t\x04\x02\x02\u01E4\x9A\x03\x02\x02\x02\u01E5' +
    '\u01E6\t\x05\x02\x02\u01E6\x9C\x03\x02\x02\x02\u01E7\u01E8\t\x06\x02\x02' +
    '\u01E8\x9E\x03\x02\x02\x02\u01E9\u01EA\t\x07\x02\x02\u01EA\xA0\x03\x02' +
    '\x02\x02\u01EB\u01EC\t\b\x02\x02\u01EC\xA2\x03\x02\x02\x02\u01ED\u01EE' +
    '\x07^\x02\x02\u01EE\u01EF\t\t\x02\x02\u01EF\xA4\x03\x02\x02\x02\u01F0' +
    '\u01F3\n\n\x02\x02\u01F1\u01F3\x05\xA3R\x02\u01F2\u01F0\x03\x02\x02\x02' +
    '\u01F2\u01F1\x03\x02\x02\x02\u01F3\xA6\x03\x02\x02\x02\u01F4\u01F8\x05' +
    '\x99M\x02\u01F5\u01F7\x05\x9BN\x02\u01F6\u01F5\x03\x02\x02\x02\u01F7\u01FA' +
    '\x03\x02\x02\x02\u01F8\u01F6\x03\x02\x02\x02\u01F8\u01F9\x03\x02\x02\x02' +
    '\u01F9\u01FD\x03\x02\x02\x02\u01FA\u01F8\x03\x02\x02\x02\u01FB\u01FD\x05' +
    '\xA1Q\x02\u01FC\u01F4\x03\x02\x02\x02\u01FC\u01FB\x03\x02\x02\x02\u01FD' +
    '\xA8\x03\x02\x02\x02\u01FE\u01FF\x05\xA7T\x02\u01FF\u0203\x05\x1F\x10' +
    '\x02\u0200\u0202\x05\x9BN\x02\u0201\u0200\x03\x02\x02\x02\u0202\u0205' +
    '\x03\x02\x02\x02\u0203\u0201\x03\x02\x02\x02\u0203\u0204\x03\x02\x02\x02' +
    '\u0204\xAA\x03\x02\x02\x02\u0205\u0203\x03\x02\x02\x02\u0206\u0207\x07' +
    ')\x02\x02\u0207\u0208\x05\xA5S\x02\u0208\u0209\x07)\x02\x02\u0209\xAC' +
    '\x03\x02\x02\x02\u020A\u020E\x07$\x02\x02\u020B\u020D\x05\xA5S\x02\u020C' +
    '\u020B\x03\x02\x02\x02\u020D\u0210\x03\x02\x02\x02\u020E\u020C\x03\x02' +
    '\x02\x02\u020E\u020F\x03\x02\x02\x02\u020F\u0211\x03\x02\x02\x02\u0210' +
    '\u020E\x03\x02\x02\x02\u0211\u0212\x07$\x02\x02\u0212\xAE\x03\x02\x02' +
    '\x02\u0213\u0218\x05\x9FP\x02\u0214\u0217\x05\x9FP\x02\u0215\u0217\x05' +
    '\x9BN\x02\u0216\u0214\x03\x02\x02\x02\u0216\u0215\x03\x02\x02\x02\u0217' +
    '\u021A\x03\x02\x02\x02\u0218\u0216\x03\x02\x02\x02\u0218\u0219\x03\x02' +
    '\x02\x02\u0219\xB0\x03\x02\x02\x02\u021A\u0218\x03\x02\x02\x02\r\x02\u0125' +
    '\u018B\u0199\u01F2\u01F8\u01FC\u0203\u020E\u0216\u0218\x03\b\x02\x02'
  public static __ATN: ATN
  public static get _ATN(): ATN {
    if (!CalcLexer.__ATN) {
      CalcLexer.__ATN = new ATNDeserializer().deserialize(
        Utils.toCharArray(CalcLexer._serializedATN),
      )
    }

    return CalcLexer.__ATN
  }
}
